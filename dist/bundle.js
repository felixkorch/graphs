!function(t){var e={};function n(o){if(e[o])return e[o].exports;var i=e[o]={i:o,l:!1,exports:{}};return t[o].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=t,n.c=e,n.d=function(t,e,o){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:o})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var o=Object.create(null);if(n.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)n.d(o,i,function(e){return t[e]}.bind(null,i));return o},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=0)}([function(t,e){var n,o,i=this&&this.__extends||(n=function(t,e){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(t,e)},function(t,e){function o(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(o.prototype=e.prototype,new o)});!function(t){var e=function(){return function(){this.stroke="BLUE",this.strokeWidth=3}}(),n=function(){function t(t,n){this.path=n||"",this.pathProperties=t||new e,this.coordinates=[],this.currentPos={x:0,y:0}}return t.prototype.moveTo=function(t,e){return this.coordinates.push({x:t,y:e}),this.currentPos={x:t,y:e},this.path+="M "+t+" "+e+" ",this},t.prototype.lineTo=function(t,e){return this.currentPos={x:t,y:e},this.path+="L "+t+" "+e+" ",this},t.prototype.LineH=function(t){return this.currentPos.x=t,this.path+="H "+t+" ",this},t.prototype.LineV=function(t){return this.currentPos.y=t,this.path+="V "+t+" ",this},t.prototype.render=function(){return'<path d=" '+this.path+' "stroke='+this.pathProperties.stroke+" stroke-width="+this.pathProperties.strokeWidth+" />"},t}(),o=function(){function t(t,e,n){this.content=t,this.fontSize=e,this.position=n}return t.prototype.render=function(){return"<text font-size="+this.fontSize+'x="'+this.position.x+'" y="'+this.position.y+'" class="small">'+this.content+"</text>"},t}(),r=(function(){}(),function(){function t(t,n){this._data=n||[],this.div=document.getElementById(t),this.dimensions={width:this.div.offsetWidth,height:this.div.offsetHeight},this.graphProps=new e}return t.prototype.coordinates=function(t,e){for(var n=[],o=e.width/t.length,i=this.boundsOfData(t),r=0;r<t.length;r++)n.push({x:o*r+50,y:e.height-t[r].value/i.max*e.height});return n},t.prototype.createYHeaders=function(){for(var t=this.boundsOfData(this._data),e=[],n=0;n<10;n++){var i=Math.floor(t.max-n*t.max/10).toString();e.push(new o(i,12,{x:0,y:this.dimensions.height/10*n+6}))}return e},t.prototype.createReferenceLines=function(t){for(var e={stroke:"#dbdbdb",strokeWidth:.5},o=e.strokeWidth/2,i=new n(e),r=this.coordinates(this._data,this.dimensions),s=1;s<r.length;s++)i.moveTo(r[s].x-o,o),i.LineV(this.dimensions.height-o);for(s=0;s<t;s++)i.moveTo(o+50,this.dimensions.height/t*s+o),i.LineH(this.dimensions.width-o);return i},t.prototype.createGraph=function(){var t=new n;return t.moveTo(0,0),t.lineTo(100,100),t},t.prototype.addPoint=function(t,e){null!=e?this._data.splice(e,0,t):this._data.push(t)},t.prototype.removePoint=function(t){this._data.splice(t,1)},Object.defineProperty(t.prototype,"data",{set:function(t){this._data=t,(void 0).push(this.createReferenceLines(10)),(void 0).push(this.createGraph()),(void 0).concat(this.createYHeaders()),this.chartComponents=void 0},enumerable:!0,configurable:!0}),t.prototype.boundsOfData=function(t){if(!t)return{min:0,max:0};var e=t.map(function(t){return t.value}),n=Math.max.apply(Math,e);return{min:Math.min.apply(Math,e),max:n}},t.prototype.draw=function(){return'<svg id="mainSVG" preserveAspectRatio="xMinYMin none" width="100%" height="100%" viewBox="0 0 '+this.dimensions.width+" "+this.dimensions.height+'" height=>'+this.chartComponents.forEach(function(t){return t.render()})+"</svg>"},t.prototype.drawChart=function(){this.chartComponents?this.div.innerHTML+=this.draw():console.log("Data not set!")},t.prototype.connectPoints=function(t,e,n){n.lineTo(t,e).moveTo(t,e)},t}());t.XYChart=r;var s=function(t){function e(e,n){var o=t.call(this,e,n)||this;return console.log("chart created!"),o}return i(e,t),e.prototype.connectPoints=function(t,e,n){var o=e<n.currentPos.y,i=this.graphProps.strokeWidth/2;n.LineH(t).moveTo(t-i,o?n.currentPos.y+i:n.currentPos.y-i).LineV(o?e+i:e-i).moveTo(n.currentPos.x-i,n.currentPos.y)},e.prototype.createGraph=function(){for(var t=new n(this.graphProps),e={width:this.dimensions.width-200,height:this.dimensions.height-100},o=this.coordinates(this._data,e),i=0;i<o.length;i++)0==i&&t.moveTo(o[i].x,o[i].y),this.connectPoints(o[i].x,o[i].y,t);return t.LineH(e.width+t.pathProperties.strokeWidth/2),t},e}(r);t.StepLineChart=s}(o||(o={}))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,