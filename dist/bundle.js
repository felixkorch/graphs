!function(t){var e={};function n(i){if(e[i])return e[i].exports;var r=e[i]={i:i,l:!1,exports:{}};return t[i].call(r.exports,r,r.exports,n),r.l=!0,r.exports}n.m=t,n.c=e,n.d=function(t,e,i){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:i})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var i=Object.create(null);if(n.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var r in t)n.d(i,r,function(e){return t[e]}.bind(null,r));return i},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=0)}([function(t,e){var n,i,r=this&&this.__extends||(n=function(t,e){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(t,e)},function(t,e){function i(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)});!function(t){var e,n=function(){function t(){this.object={}}return t.prototype.put=function(t,e){this.object[t]=e},t.prototype.get=function(t){return this.object[t]},t}(),i=function(){return function(t){this.id=t||""}}(),o=function(){return function(){this.stroke="BLUE",this.strokeWidth=3}}(),s=function(){return function(){}}(),h=function(){function t(t){this.data=t||[],this.properties=new s,this.xKey="",this.yKey=""}return t.prototype.addData=function(t,e){this.data.splice(0,e),this.data.push(t)},t.prototype.bounds=function(){if(!this.data)return{min:0,max:0};var t=this.data.map(function(t){return t.value});return{min:Math.min.apply(Math,t),max:Math.max.apply(Math,t)}},t.prototype.toHourMinute=function(){var t=this;return this.data.map(function(e){return new Date(e[t.xKey]).toLocaleTimeString([],{hour:"2-digit",minute:"2-digit"})})},t}();t.DataSet=h,function(t){t[t.MOVETO=0]="MOVETO",t[t.LINETO=1]="LINETO",t[t.LINEH=2]="LINEH",t[t.LINEV=3]="LINEV"}(e||(e={}));var a=function(t){function n(e,n){var i=t.call(this,e)||this;return i.pathProperties=n||new o,i.currentPos=[0,0],i.dataPoints=[],i}return r(n,t),n.typeString=function(t,n){switch(t){case e.MOVETO:return"M "+n[0]+" "+n[1]+" ";case e.LINETO:return"L "+n[0]+" "+n[1]+" ";case e.LINEH:return"H "+n[0]+" ";case e.LINEV:return"V "+n[1]+" "}},n.prototype.moveTo=function(t,n){return this.currentPos=[t,n],this.dataPoints.push({coords:[t,n],type:e.MOVETO}),this},n.prototype.lineTo=function(t,n){return this.currentPos=[t,n],this.dataPoints.push({coords:[t,n],type:e.LINETO}),this},n.prototype.LineH=function(t){return this.currentPos[0]=t,this.dataPoints.push({coords:[t,0],type:e.LINEH}),this},n.prototype.LineV=function(t){return this.currentPos[1]=t,this.dataPoints.push({coords:[0,t],type:e.LINEV}),this},n.prototype.update=function(){for(var t="",e=0,i=this.dataPoints;e<i.length;e++){var r=i[e];t+=n.typeString(r.type,r.coords)}this.path=t},n.prototype.render=function(t){this.update();var e=t.querySelector("#"+this.id);e?e.setAttribute("d",this.path):t.innerHTML+='<path id="'+this.id+'" d="'+this.path+'"stroke='+this.pathProperties.stroke+" stroke-width="+this.pathProperties.strokeWidth+" />"},n}(i),u=function(t){function e(e,n,i,r){var o=t.call(this,r)||this;return o.content=e,o.fontSize=n,o.position=i,o}return r(e,t),e.prototype.render=function(t){this.id?t.querySelector("#"+this.id).innerHTML=this.content:t.innerHTML+='<text id="'+this.id+'" font-size="'+this.fontSize+'"x="'+this.position.x+'" y="'+this.position.y+'" class="small">'+this.content+"</text>"},e}(i),c=function(t){function e(e){var n=t.call(this,e)||this;return n._components=[],n}return r(e,t),Object.defineProperty(e.prototype,"components",{set:function(t){this._components=t},enumerable:!0,configurable:!0}),e.prototype.render=function(t){t.querySelector("#"+this.id)||(t.innerHTML+='<g id="'+this.id+'"></g>');var e=t.querySelector("#"+this.id);e.innerHTML="",this._components.forEach(function(t){return t.render(e)})},e}(i),p=function(){function t(t){this.div=document.getElementById(t),this.offsetX=.04*this.div.offsetWidth,this.offsetY=.05*this.div.offsetHeight,this.dimensions={width:this.div.offsetWidth-this.offsetX,height:this.div.offsetHeight-this.offsetY},this.components=new n,this.div.innerHTML=this.renderSVG(),this.dataCollection=[]}return t.prototype.createDataSet=function(){var t=new h;return this.dataCollection.push(t),t},t.prototype.renderSVG=function(t){return'<svg id="SVG_DIV" width="100%" height="100%" viewBox=" 0 0 '+this.div.offsetWidth+" "+this.div.offsetHeight+'"><g id="main" transform="translate('+this.offsetX/2+" "+this.offsetY/2+')" ></g></svg>'},t.prototype.createReferenceLines=function(){var t=this.dataCollection[0];if(t){for(var e=t.properties.density,n={stroke:"#dbdbdb",strokeWidth:.5},i=n.strokeWidth/2,r=this.dimensions.width/(t.data.length+1),o=new a("refLines",n),s=0;s<t.data.length-1;s++)o.moveTo(r*(s+2)-i,i),o.LineV(this.dimensions.height-i);for(s=0;s<e-1;s++)o.moveTo(i+r,this.dimensions.height/e*(s+1)+i),o.LineH(this.dimensions.width-i);return this.components.put(o.id,o),o}},t.prototype.createXHeaders=function(){var t=this.dataCollection[0];if(t){for(var e=[],n=this.dimensions.height/46,i=this.dimensions.width/(t.data.length+1),r=t.toHourMinute(),o=0;o<t.data.length;o++)e.push(new u(r[o],n,{x:i*(o+1),y:this.dimensions.height}));return e}},t.prototype.createYHeaders=function(){var t=this.dataCollection[0];if(t){for(var e=[],n=this.dimensions.height/35,i=t.properties.density,r=this.dimensions.height/i,o=0;o<i;o++){var s=Math.floor(t.bounds().max-o*t.bounds().max/(i-1)).toString();e.push(new u(s,n,{x:0,y:r*o+.35*n}))}return e}},t.prototype.draw=function(){var t=this.div.querySelector("#main");this.createReferenceLines().render(t);for(var e=0,n=this.dataCollection;e<n.length;e++){var i=n[e];this.createGraph(i).render(t)}var r=new c("yHeaders");r.components=this.createYHeaders(),r.render(t);var o=new c("xHeaders");o.components=this.createXHeaders(),o.render(t)},t}();t.XYChart=p;var d=function(t){function e(e){return t.call(this,e)||this}return r(e,t),e.prototype.connectPoints=function(t,e,n){n.lineTo(t,e).moveTo(t,e)},e.prototype.createGraph=function(){var t=new a("graph");return t.moveTo(0,0),t.lineTo(100,100),t},e}(p);t.LineChart=d;var f=function(t){function e(e){return t.call(this,e)||this}return r(e,t),e.prototype.connectPoints=function(t,e,n,i){var r=e<n.currentPos[1],o=i.properties.pathProperties.strokeWidth/2;n.LineH(t).moveTo(t-o,r?n.currentPos[1]+o:n.currentPos[1]-o).LineV(r?e+o:e-o).moveTo(n.currentPos[0]-o,n.currentPos[1])},e.prototype.createGraph=function(t){var e=new a("graph",t.properties.pathProperties),n=this.dimensions.width/(t.data.length+1),i=this.dimensions.height/t.properties.density;e.moveTo(n,this.dimensions.height-t.data[0][t.yKey]/t.bounds().max*this.dimensions.height-i);for(var r=1;r<t.data.length;r++)this.connectPoints(n*(r+1),this.dimensions.height-i-t.data[r][t.yKey]/t.bounds().max*(this.dimensions.height-i),e,t);return e.LineH(this.dimensions.width),this.components.put(e.id,e),e},e}(p);t.StepLineChart=f}(i||(i={}))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vc3JjL2luZGV4LnRzIl0sIm5hbWVzIjpbImluc3RhbGxlZE1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJleHBvcnRzIiwibW9kdWxlIiwiaSIsImwiLCJtb2R1bGVzIiwiY2FsbCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwidmFsdWUiLCJ0IiwibW9kZSIsIl9fZXNNb2R1bGUiLCJucyIsImNyZWF0ZSIsImtleSIsImJpbmQiLCJuIiwib2JqZWN0IiwicHJvcGVydHkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwieHljaGFydHMiLCJQYXRoVHlwZSIsIk1hcCIsInRoaXMiLCJwdXQiLCJTVkdDb21wb25lbnQiLCJpZCIsIlBhdGhQcm9wZXJ0aWVzIiwic3Ryb2tlIiwic3Ryb2tlV2lkdGgiLCJQcm9wZXJ0aWVzIiwiRGF0YVNldCIsImRhdGEiLCJwcm9wZXJ0aWVzIiwieEtleSIsInlLZXkiLCJhZGREYXRhIiwiaXRlbSIsInJlbW92ZSIsInNwbGljZSIsInB1c2giLCJib3VuZHMiLCJtaW4iLCJtYXgiLCJ2YWx1ZXMiLCJtYXAiLCJlIiwiTWF0aCIsImFwcGx5IiwidG9Ib3VyTWludXRlIiwiX3RoaXMiLCJEYXRlIiwidG9Mb2NhbGVUaW1lU3RyaW5nIiwiaG91ciIsIm1pbnV0ZSIsIlBhdGgiLCJfc3VwZXIiLCJwYXRoUHJvcGVydGllcyIsImN1cnJlbnRQb3MiLCJkYXRhUG9pbnRzIiwiX19leHRlbmRzIiwidHlwZVN0cmluZyIsInR5cGUiLCJjb29yZHMiLCJNT1ZFVE8iLCJMSU5FVE8iLCJMSU5FSCIsIkxJTkVWIiwibW92ZVRvIiwieCIsInkiLCJsaW5lVG8iLCJMaW5lSCIsIkxpbmVWIiwidXBkYXRlIiwicGF0aCIsIl9pIiwiX2EiLCJsZW5ndGgiLCJyZW5kZXIiLCJjb250YWluZXIiLCJlbGVtZW50IiwicXVlcnlTZWxlY3RvciIsInNldEF0dHJpYnV0ZSIsImlubmVySFRNTCIsIlRleHQiLCJjb250ZW50IiwiZm9udFNpemUiLCJwb3NpdGlvbiIsIlNWR0JhdGNoIiwiX2NvbXBvbmVudHMiLCJsaXN0IiwiZm9yRWFjaCIsIlhZQ2hhcnQiLCJkaXYiLCJkb2N1bWVudCIsImdldEVsZW1lbnRCeUlkIiwib2Zmc2V0WCIsIm9mZnNldFdpZHRoIiwib2Zmc2V0WSIsIm9mZnNldEhlaWdodCIsImRpbWVuc2lvbnMiLCJ3aWR0aCIsImhlaWdodCIsImNvbXBvbmVudHMiLCJyZW5kZXJTVkciLCJkYXRhQ29sbGVjdGlvbiIsImNyZWF0ZURhdGFTZXQiLCJzZXQiLCJjcmVhdGVSZWZlcmVuY2VMaW5lcyIsImRlbnNpdHkiLCJoYWxmU3Ryb2tlIiwiaW50ZXJ2YWwiLCJjcmVhdGVYSGVhZGVycyIsInJlc3VsdCIsImludGVydmFsWCIsImRhdGVzIiwiY3JlYXRlWUhlYWRlcnMiLCJmbG9vciIsInRvU3RyaW5nIiwiZHJhdyIsIm1haW5TdmciLCJjcmVhdGVHcmFwaCIsInlIZWFkZXJzIiwieEhlYWRlcnMiLCJMaW5lQ2hhcnQiLCJjb25uZWN0UG9pbnRzIiwiU3RlcExpbmVDaGFydCIsIm1vdmluZ1VwIiwiaW50ZXJ2YWxZIl0sIm1hcHBpbmdzIjoiYUFDQSxJQUFBQSxFQUFBLEdBR0EsU0FBQUMsRUFBQUMsR0FHQSxHQUFBRixFQUFBRSxHQUNBLE9BQUFGLEVBQUFFLEdBQUFDLFFBR0EsSUFBQUMsRUFBQUosRUFBQUUsR0FBQSxDQUNBRyxFQUFBSCxFQUNBSSxHQUFBLEVBQ0FILFFBQUEsSUFVQSxPQU5BSSxFQUFBTCxHQUFBTSxLQUFBSixFQUFBRCxRQUFBQyxJQUFBRCxRQUFBRixHQUdBRyxFQUFBRSxHQUFBLEVBR0FGLEVBQUFELFFBS0FGLEVBQUFRLEVBQUFGLEVBR0FO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LCJmaWxlIjoiYnVuZGxlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuIFx0XHR9XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3RcbiBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3RcbiBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbiBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbiBcdFx0cmV0dXJuIG5zO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDApO1xuIiwibmFtZXNwYWNlIHh5Y2hhcnRzIHtcclxuICAgIHR5cGUgQ29sb3IgPSBcIiNGRkZGRkZcIiB8IFwiI0ZGMDAwMFwiIHwgXCIjMDAwMEZGXCI7XHJcbiAgICBjb25zdCBXSElURTogQ29sb3IgPSBcIiNGRkZGRkZcIjtcclxuICAgIGNvbnN0IFJFRDogQ29sb3IgPSBcIiNGRjAwMDBcIjtcclxuICAgIGNvbnN0IEJMVUU6IENvbG9yID0gXCIjMDAwMEZGXCI7XHJcblxyXG4gICAgY2xhc3MgTWFwPEssIFY+IHtcclxuICAgICAgICBrZXk6IEs7XHJcbiAgICAgICAgdmFsdWU6IFY7XHJcbiAgICAgICAgb2JqZWN0OiBhbnk7XHJcblxyXG4gICAgICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgICAgICB0aGlzLm9iamVjdCA9IHt9O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHV0KGtleTogSywgdmFsdWU6IFYpIHtcclxuICAgICAgICAgICAgdGhpcy5vYmplY3Rba2V5XSA9IHZhbHVlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZ2V0KGtleTogSyk6IFYge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5vYmplY3Rba2V5XTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgU1ZHX0RJViA9ICdtYWluJztcclxuXHJcbiAgICBhYnN0cmFjdCBjbGFzcyBTVkdDb21wb25lbnQge1xyXG4gICAgICAgIGFic3RyYWN0IHJlbmRlcihjb250YWluZXI6IEhUTUxFbGVtZW50KTogdm9pZDtcclxuICAgICAgICBpZDogc3RyaW5nO1xyXG5cclxuICAgICAgICBjb25zdHJ1Y3RvcihpZD86IHN0cmluZykge1xyXG4gICAgICAgICAgICB0aGlzLmlkID0gaWQgPyBpZCA6ICcnO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBjbGFzcyBQYXRoUHJvcGVydGllcyB7XHJcbiAgICAgICAgcHVibGljIHN0cm9rZTogc3RyaW5nID0gXCJCTFVFXCI7XHJcbiAgICAgICAgcHVibGljIHN0cm9rZVdpZHRoOiBudW1iZXIgPSAzO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICBjbGFzcyBQcm9wZXJ0aWVzIHtcclxuICAgICAgICBwdWJsaWMgcGF0aFByb3BlcnRpZXM6IFBhdGhQcm9wZXJ0aWVzO1xyXG4gICAgICAgIHB1YmxpYyBkZW5zaXR5OiBudW1iZXI7XHJcbiAgICB9XHJcblxyXG4gICAgZXhwb3J0IGNsYXNzIERhdGFTZXQge1xyXG4gICAgICAgIHB1YmxpYyBkYXRhOiBhbnlbXTtcclxuICAgICAgICBwdWJsaWMgcHJvcGVydGllczogUHJvcGVydGllczsgXHJcbiAgICAgICAgcHVibGljIHhLZXk6IHN0cmluZztcclxuICAgICAgICBwdWJsaWMgeUtleTogc3RyaW5nO1xyXG5cclxuICAgICAgICBjb25zdHJ1Y3RvcihkYXRhPzogYW55KSB7XHJcbiAgICAgICAgICAgIHRoaXMuZGF0YSA9IGRhdGEgPyBkYXRhIDogW107XHJcbiAgICAgICAgICAgIHRoaXMucHJvcGVydGllcyA9IG5ldyBQcm9wZXJ0aWVzKCk7XHJcbiAgICAgICAgICAgIHRoaXMueEtleSA9ICcnO1xyXG4gICAgICAgICAgICB0aGlzLnlLZXkgPSAnJztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBhZGREYXRhKGl0ZW06IGFueSwgcmVtb3ZlOiBudW1iZXIpIHtcclxuICAgICAgICAgICAgdGhpcy5kYXRhLnNwbGljZSgwLCByZW1vdmUpO1xyXG4gICAgICAgICAgICB0aGlzLmRhdGEucHVzaChpdGVtKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBib3VuZHMoKSB7XHJcbiAgICAgICAgICAgIGlmKCF0aGlzLmRhdGEpXHJcbiAgICAgICAgICAgICAgICByZXR1cm4geyBtaW46IDAsIG1heDogMCB9O1xyXG4gICAgICAgICAgICBsZXQgdmFsdWVzID0gdGhpcy5kYXRhLm1hcChlID0+IGUudmFsdWUpO1xyXG4gICAgICAgICAgICByZXR1cm4geyBtaW46IE1hdGgubWluKC4uLnZhbHVlcyksIG1heDogTWF0aC5tYXgoLi4udmFsdWVzKSB9O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHRvSG91ck1pbnV0ZSgpIHsgLy8gRml4IG9wdGlvbnNcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZGF0YS5tYXAoZSA9PiBuZXcgRGF0ZShlW3RoaXMueEtleV0pLnRvTG9jYWxlVGltZVN0cmluZyhbXSwge2hvdXI6ICcyLWRpZ2l0JywgbWludXRlOicyLWRpZ2l0J30pKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgfVxyXG5cclxuICAgIGVudW0gUGF0aFR5cGUge1xyXG4gICAgICAgIE1PVkVUTyxcclxuICAgICAgICBMSU5FVE8sXHJcbiAgICAgICAgTElORUgsXHJcbiAgICAgICAgTElORVZcclxuICAgIH1cclxuXHJcbiAgICBjbGFzcyBQYXRoIGV4dGVuZHMgU1ZHQ29tcG9uZW50IHtcclxuXHJcbiAgICAgICAgcHVibGljIHBhdGhQcm9wZXJ0aWVzOiBQYXRoUHJvcGVydGllcztcclxuICAgICAgICBwcm90ZWN0ZWQgcGF0aDogc3RyaW5nO1xyXG4gICAgICAgIHB1YmxpYyBjdXJyZW50UG9zOiBbIG51bWJlciwgbnVtYmVyIF07XHJcbiAgICAgICAgcHJvdGVjdGVkIGRhdGFQb2ludHM6IHsgY29vcmRzOiBbbnVtYmVyLCBudW1iZXJdLCB0eXBlOiBQYXRoVHlwZSB9W107XHJcbiAgICBcclxuICAgICAgICBjb25zdHJ1Y3RvcihpZDogc3RyaW5nLCBwYXRoUHJvcGVydGllcz86IFBhdGhQcm9wZXJ0aWVzKSB7XHJcbiAgICAgICAgICAgIHN1cGVyKGlkKTtcclxuICAgICAgICAgICAgdGhpcy5wYXRoUHJvcGVydGllcyA9IHBhdGhQcm9wZXJ0aWVzID8gcGF0aFByb3BlcnRpZXMgOiBuZXcgUGF0aFByb3BlcnRpZXMoKTtcclxuICAgICAgICAgICAgdGhpcy5jdXJyZW50UG9zID0gWzAsIDBdO1xyXG4gICAgICAgICAgICB0aGlzLmRhdGFQb2ludHMgPSBbXTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHByb3RlY3RlZCBzdGF0aWMgdHlwZVN0cmluZyh0eXBlOiBQYXRoVHlwZSwgY29vcmRzOiBbbnVtYmVyLCBudW1iZXJdKSB7XHJcbiAgICAgICAgICAgIHN3aXRjaCh0eXBlKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIFBhdGhUeXBlLk1PVkVUTzogcmV0dXJuICdNICcgKyBjb29yZHNbMF0gKyAnICcgKyBjb29yZHNbMV0gKyAnICc7XHJcbiAgICAgICAgICAgICAgICBjYXNlIFBhdGhUeXBlLkxJTkVUTzogcmV0dXJuICdMICcgKyBjb29yZHNbMF0gKyAnICcgKyBjb29yZHNbMV0gKyAnICc7XHJcbiAgICAgICAgICAgICAgICBjYXNlIFBhdGhUeXBlLkxJTkVIOiByZXR1cm4gJ0ggJyArIGNvb3Jkc1swXSArICcgJztcclxuICAgICAgICAgICAgICAgIGNhc2UgUGF0aFR5cGUuTElORVY6IHJldHVybiAnViAnICsgY29vcmRzWzFdICsgJyAnO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgbW92ZVRvKHg6IG51bWJlciwgeTogbnVtYmVyKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY3VycmVudFBvcyA9IFt4LCB5XTtcclxuICAgICAgICAgICAgdGhpcy5kYXRhUG9pbnRzLnB1c2goeyBjb29yZHM6IFt4LCB5XSwgdHlwZTogUGF0aFR5cGUuTU9WRVRPIH0pO1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICB9XHJcbiAgICBcclxuICAgICAgICBwdWJsaWMgbGluZVRvKHg6IG51bWJlciwgeTogbnVtYmVyKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY3VycmVudFBvcyA9IFt4LCB5XTtcclxuICAgICAgICAgICAgdGhpcy5kYXRhUG9pbnRzLnB1c2goeyBjb29yZHM6IFt4LCB5XSwgdHlwZTogUGF0aFR5cGUuTElORVRPIH0pO1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICB9XHJcbiAgICBcclxuICAgICAgICBwdWJsaWMgTGluZUgoeDogbnVtYmVyKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY3VycmVudFBvc1swXSA9IHg7XHJcbiAgICAgICAgICAgIHRoaXMuZGF0YVBvaW50cy5wdXNoKHsgY29vcmRzOiBbeCwgMF0sIHR5cGU6IFBhdGhUeXBlLkxJTkVIIH0pO1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICB9XHJcbiAgICBcclxuICAgICAgICBwdWJsaWMgTGluZVYoeTogbnVtYmVyKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY3VycmVudFBvc1sxXSA9IHk7XHJcbiAgICAgICAgICAgIHRoaXMuZGF0YVBvaW50cy5wdXNoKHsgY29vcmRzOiBbMCwgeV0sIHR5cGU6IFBhdGhUeXBlLkxJTkVWIH0pO1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyB1cGRhdGUoKSB7XHJcbiAgICAgICAgICAgIGxldCBwYXRoID0gJyc7XHJcbiAgICAgICAgICAgIGZvcihsZXQgeCBvZiB0aGlzLmRhdGFQb2ludHMpIHtcclxuICAgICAgICAgICAgICAgIHBhdGggKz0gUGF0aC50eXBlU3RyaW5nKHgudHlwZSwgeC5jb29yZHMpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMucGF0aCA9IHBhdGg7XHJcbiAgICAgICAgfVxyXG4gICAgXHJcbiAgICAgICAgcHVibGljIHJlbmRlcihjb250YWluZXI6IEhUTUxFbGVtZW50KSB7XHJcbiAgICAgICAgICAgIHRoaXMudXBkYXRlKCk7XHJcbiAgICAgICAgICAgIGxldCBlbGVtZW50ID0gY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoJyMnICsgdGhpcy5pZCk7XHJcbiAgICAgICAgICAgIGlmKGVsZW1lbnQpIHtcclxuICAgICAgICAgICAgICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKCdkJywgdGhpcy5wYXRoKTtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjb250YWluZXIuaW5uZXJIVE1MICs9XHJcbiAgICAgICAgICAgICAgICAnPHBhdGggaWQ9XCInICsgdGhpcy5pZCArICdcIiBkPVwiJyArIHRoaXMucGF0aCArICdcIicgK1xyXG4gICAgICAgICAgICAgICAgJ3N0cm9rZT0nKyB0aGlzLnBhdGhQcm9wZXJ0aWVzLnN0cm9rZSArICcgc3Ryb2tlLXdpZHRoPScgKyB0aGlzLnBhdGhQcm9wZXJ0aWVzLnN0cm9rZVdpZHRoICsgJyAvPic7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgXHJcbiAgICBjbGFzcyBUZXh0IGV4dGVuZHMgU1ZHQ29tcG9uZW50IHtcclxuICAgICAgICBjb250ZW50OiBzdHJpbmc7XHJcbiAgICAgICAgZm9udFNpemU6IG51bWJlcjtcclxuICAgICAgICBwb3NpdGlvbjogeyB4OiBudW1iZXIsIHk6IG51bWJlciB9O1xyXG4gICAgXHJcbiAgICAgICAgY29uc3RydWN0b3IoY29udGVudDogc3RyaW5nLCBmb250U2l6ZTogbnVtYmVyLCBwb3NpdGlvbjogeyB4OiBudW1iZXIsIHk6IG51bWJlciB9LCBpZD86IHN0cmluZyApIHtcclxuICAgICAgICAgICAgc3VwZXIoaWQpO1xyXG4gICAgICAgICAgICB0aGlzLmNvbnRlbnQgPSBjb250ZW50O1xyXG4gICAgICAgICAgICB0aGlzLmZvbnRTaXplID0gZm9udFNpemU7XHJcbiAgICAgICAgICAgIHRoaXMucG9zaXRpb24gPSBwb3NpdGlvbjtcclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgcHVibGljIHJlbmRlcihjb250YWluZXI6IEhUTUxFbGVtZW50KSB7XHJcbiAgICAgICAgICAgIGlmKHRoaXMuaWQpIHtcclxuICAgICAgICAgICAgICAgIGNvbnRhaW5lci5xdWVyeVNlbGVjdG9yKCcjJyArIHRoaXMuaWQpLmlubmVySFRNTCA9IHRoaXMuY29udGVudDtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjb250YWluZXIuaW5uZXJIVE1MICs9XHJcbiAgICAgICAgICAgICAgICAgICAgJzx0ZXh0IGlkPVwiJyArIHRoaXMuaWQgKyAnXCIgZm9udC1zaXplPVwiJyArIHRoaXMuZm9udFNpemUgKyAnXCInICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJ3g9XCInICsgdGhpcy5wb3NpdGlvbi54ICsgJ1wiICcgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAneT1cIicgKyB0aGlzLnBvc2l0aW9uLnkgKyAnXCIgJyArICdjbGFzcz1cInNtYWxsXCI+J1xyXG4gICAgICAgICAgICAgICAgICAgICAgICArIHRoaXMuY29udGVudCArXHJcbiAgICAgICAgICAgICAgICAgICAgJzwvdGV4dD4nO1xyXG4gICAgICAgIH1cclxuICAgIFxyXG4gICAgfVxyXG5cclxuICAgIGNsYXNzIFNWR0JhdGNoIGV4dGVuZHMgU1ZHQ29tcG9uZW50IHtcclxuICAgICAgICBwcml2YXRlIF9jb21wb25lbnRzOiBTVkdDb21wb25lbnRbXTtcclxuXHJcbiAgICAgICAgc2V0IGNvbXBvbmVudHMobGlzdDogU1ZHQ29tcG9uZW50W10pIHtcclxuICAgICAgICAgICAgdGhpcy5fY29tcG9uZW50cyA9IGxpc3Q7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdHJ1Y3RvcihpZDogc3RyaW5nKSB7XHJcbiAgICAgICAgICAgIHN1cGVyKGlkKTtcclxuICAgICAgICAgICAgdGhpcy5fY29tcG9uZW50cyA9IFtdO1xyXG4gICAgICAgIH1cclxuICAgICAgICBwdWJsaWMgcmVuZGVyKGNvbnRhaW5lcjogSFRNTEVsZW1lbnQpIHtcclxuICAgICAgICAgICAgaWYoIWNvbnRhaW5lci5xdWVyeVNlbGVjdG9yKCcjJyArIHRoaXMuaWQpKVxyXG4gICAgICAgICAgICAgICAgY29udGFpbmVyLmlubmVySFRNTCArPSAnPGcgaWQ9XCInICsgdGhpcy5pZCArICdcIj48L2c+JztcclxuICAgICAgICAgICAgbGV0IGVsZW1lbnQgPSBjb250YWluZXIucXVlcnlTZWxlY3RvcignIycgKyB0aGlzLmlkKTtcclxuICAgICAgICAgICAgZWxlbWVudC5pbm5lckhUTUwgPSAnJztcclxuICAgICAgICAgICAgdGhpcy5fY29tcG9uZW50cy5mb3JFYWNoKCBlID0+IGUucmVuZGVyKGVsZW1lbnQgYXMgSFRNTEVsZW1lbnQpICk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGV4cG9ydCBhYnN0cmFjdCBjbGFzcyBYWUNoYXJ0IHtcclxuICAgICAgICBwcm90ZWN0ZWQgZGF0YUNvbGxlY3Rpb246IERhdGFTZXRbXTtcclxuICAgICAgICBwcm90ZWN0ZWQgZGl2OiBIVE1MRWxlbWVudDtcclxuICAgICAgICBwcm90ZWN0ZWQgZGltZW5zaW9uczogeyB3aWR0aDogbnVtYmVyLCBoZWlnaHQ6IG51bWJlciB9O1xyXG4gICAgICAgIHByb3RlY3RlZCBjb21wb25lbnRzOiBNYXA8c3RyaW5nLCBTVkdDb21wb25lbnQ+O1xyXG5cclxuICAgICAgICBwcm90ZWN0ZWQgcmVhZG9ubHkgb2Zmc2V0WTogbnVtYmVyO1xyXG4gICAgICAgIHByb3RlY3RlZCByZWFkb25seSBvZmZzZXRYOiBudW1iZXI7XHJcbiAgICBcclxuICAgICAgICBjb25zdHJ1Y3RvcihkaXY6IHN0cmluZykge1xyXG4gICAgICAgICAgICB0aGlzLmRpdiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGRpdik7XHJcblxyXG4gICAgICAgICAgICB0aGlzLm9mZnNldFggPSB0aGlzLmRpdi5vZmZzZXRXaWR0aCAqIDAuMDQ7XHJcbiAgICAgICAgICAgIHRoaXMub2Zmc2V0WSA9IHRoaXMuZGl2Lm9mZnNldEhlaWdodCAqIDAuMDU7XHJcbiAgICAgICAgICAgIHRoaXMuZGltZW5zaW9ucyA9IHsgd2lkdGg6IHRoaXMuZGl2Lm9mZnNldFdpZHRoIC0gdGhpcy5vZmZzZXRYLCBoZWlnaHQ6ICB0aGlzLmRpdi5vZmZzZXRIZWlnaHQgLSB0aGlzLm9mZnNldFkgfTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuY29tcG9uZW50cyA9IG5ldyBNYXAoKTtcclxuICAgICAgICAgICAgdGhpcy5kaXYuaW5uZXJIVE1MID0gdGhpcy5yZW5kZXJTVkcoKTtcclxuICAgICAgICAgICAgdGhpcy5kYXRhQ29sbGVjdGlvbiA9IFtdO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHJvdGVjdGVkIGFic3RyYWN0IGNyZWF0ZUdyYXBoKHNldDogRGF0YVNldCk6IFBhdGg7XHJcbiAgICAgICAgcHJvdGVjdGVkIGFic3RyYWN0IGNvbm5lY3RQb2ludHMoeDogbnVtYmVyLCB5OiBudW1iZXIsIHBhdGg6IFBhdGgsIHNldDogRGF0YVNldCk6IHZvaWQ7XHJcbiAgICBcclxuICAgICAgICBwdWJsaWMgY3JlYXRlRGF0YVNldCgpIHtcclxuICAgICAgICAgICAgbGV0IHNldCA9IG5ldyBEYXRhU2V0KCk7XHJcbiAgICAgICAgICAgIHRoaXMuZGF0YUNvbGxlY3Rpb24ucHVzaChzZXQpO1xyXG4gICAgICAgICAgICByZXR1cm4gc2V0O1xyXG4gICAgICAgIH1cclxuICAgIFxyXG4gICAgICAgIHByb3RlY3RlZCByZW5kZXJTVkcoY29udGVudD86IHN0cmluZykge1xyXG4gICAgICAgICAgICByZXR1cm4gICc8c3ZnIGlkPVwiJyArIFwiU1ZHX0RJVlwiICsgJ1wiICcgICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJ3dpZHRoPVwiMTAwJVwiIGhlaWdodD1cIjEwMCVcIiAnICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJ3ZpZXdCb3g9XCIgMCAwICcgKyB0aGlzLmRpdi5vZmZzZXRXaWR0aCArICcgJyArIHRoaXMuZGl2Lm9mZnNldEhlaWdodCArICdcIj4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJzxnIGlkPVwiJyArIFNWR19ESVYgKyAnXCIgdHJhbnNmb3JtPVwidHJhbnNsYXRlKCcgKyB0aGlzLm9mZnNldFggLyAyICsgJyAnICsgdGhpcy5vZmZzZXRZIC8gMiArICcpXCIgPjwvZz4nICtcclxuICAgICAgICAgICAgICAgICAgICAnPC9zdmc+JztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHByb3RlY3RlZCBjcmVhdGVSZWZlcmVuY2VMaW5lcygpOiBQYXRoIHtcclxuICAgICAgICAgICAgbGV0IHNldCA9IHRoaXMuZGF0YUNvbGxlY3Rpb25bMF07XHJcbiAgICAgICAgICAgIGlmKCFzZXQpXHJcbiAgICAgICAgICAgICAgICByZXR1cm5cclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGNvbnN0IGRlbnNpdHkgPSBzZXQucHJvcGVydGllcy5kZW5zaXR5O1xyXG4gICAgICAgICAgICBjb25zdCBwYXRoUHJvcGVydGllcyA9IHsgc3Ryb2tlOiBcIiNkYmRiZGJcIiwgc3Ryb2tlV2lkdGg6IDAuNSB9O1xyXG4gICAgICAgICAgICBjb25zdCBoYWxmU3Ryb2tlID0gcGF0aFByb3BlcnRpZXMuc3Ryb2tlV2lkdGggLyAyO1xyXG4gICAgICAgICAgICBjb25zdCBpbnRlcnZhbCA9IHRoaXMuZGltZW5zaW9ucy53aWR0aCAvIChzZXQuZGF0YS5sZW5ndGggKyAxKTtcclxuICAgICAgICAgICAgbGV0IHBhdGggPSBuZXcgUGF0aCgncmVmTGluZXMnLCBwYXRoUHJvcGVydGllcyk7XHJcbiAgICBcclxuICAgICAgICAgICAgZm9yKGxldCBpID0gMDsgaSA8IHNldC5kYXRhLmxlbmd0aCAtIDE7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgcGF0aC5tb3ZlVG8oaW50ZXJ2YWwgKiAoaSArIDIpIC0gaGFsZlN0cm9rZSwgaGFsZlN0cm9rZSk7XHJcbiAgICAgICAgICAgICAgICBwYXRoLkxpbmVWKHRoaXMuZGltZW5zaW9ucy5oZWlnaHQgLSBoYWxmU3Ryb2tlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgXHJcbiAgICAgICAgICAgIGZvcihsZXQgaSA9IDA7IGkgPCBkZW5zaXR5IC0gMTsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBwYXRoLm1vdmVUbyhoYWxmU3Ryb2tlICsgaW50ZXJ2YWwsIHRoaXMuZGltZW5zaW9ucy5oZWlnaHQgLyBkZW5zaXR5ICogKGkgKyAxKSArIGhhbGZTdHJva2UpO1xyXG4gICAgICAgICAgICAgICAgcGF0aC5MaW5lSCh0aGlzLmRpbWVuc2lvbnMud2lkdGggLSBoYWxmU3Ryb2tlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgXHJcbiAgICAgICAgICAgIHRoaXMuY29tcG9uZW50cy5wdXQocGF0aC5pZCwgcGF0aCk7XHJcbiAgICAgICAgICAgIHJldHVybiBwYXRoO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHJvdGVjdGVkIGNyZWF0ZVhIZWFkZXJzKCk6IFRleHRbXSB7XHJcbiAgICAgICAgICAgIGxldCBzZXQgPSB0aGlzLmRhdGFDb2xsZWN0aW9uWzBdO1xyXG4gICAgICAgICAgICBpZighc2V0KVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG5cclxuICAgICAgICAgICAgbGV0IHJlc3VsdCA9IFtdO1xyXG4gICAgICAgICAgICBjb25zdCBmb250U2l6ZSA9IHRoaXMuZGltZW5zaW9ucy5oZWlnaHQgLyA0NjtcclxuICAgICAgICAgICAgY29uc3QgaW50ZXJ2YWxYID0gdGhpcy5kaW1lbnNpb25zLndpZHRoIC8gKHNldC5kYXRhLmxlbmd0aCArIDEpO1xyXG4gICAgICAgICAgICBjb25zdCBkYXRlcyA9IHNldC50b0hvdXJNaW51dGUoKTtcclxuXHJcbiAgICAgICAgICAgIGZvcihsZXQgaSA9IDA7IGkgPCBzZXQuZGF0YS5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgcmVzdWx0LnB1c2gobmV3IFRleHQoZGF0ZXNbaV0sIGZvbnRTaXplLCB7IHg6IGludGVydmFsWCAqIChpICsgMSksIHk6IHRoaXMuZGltZW5zaW9ucy5oZWlnaHQgfSkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwcm90ZWN0ZWQgY3JlYXRlWUhlYWRlcnMoKTogVGV4dFtdIHtcclxuICAgICAgICAgICAgbGV0IHNldCA9IHRoaXMuZGF0YUNvbGxlY3Rpb25bMF07XHJcbiAgICAgICAgICAgIGlmKCFzZXQpXHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcblxyXG4gICAgICAgICAgICBsZXQgcmVzdWx0ID0gW107XHJcbiAgICAgICAgICAgIGNvbnN0IGZvbnRTaXplID0gdGhpcy5kaW1lbnNpb25zLmhlaWdodCAvIDM1O1xyXG4gICAgICAgICAgICBjb25zdCBkZW5zaXR5ID0gc2V0LnByb3BlcnRpZXMuZGVuc2l0eTtcclxuICAgICAgICAgICAgY29uc3QgaW50ZXJ2YWwgPSB0aGlzLmRpbWVuc2lvbnMuaGVpZ2h0IC8gZGVuc2l0eTtcclxuXHJcbiAgICAgICAgICAgIGZvcihsZXQgaSA9IDA7IGkgPCBkZW5zaXR5OyBpKyspIHtcclxuICAgICAgICAgICAgICAgIGxldCBjb250ZW50ID0gKE1hdGguZmxvb3Ioc2V0LmJvdW5kcygpLm1heCAtIGkgKiBzZXQuYm91bmRzKCkubWF4IC8gKGRlbnNpdHkgLSAxKSkpLnRvU3RyaW5nKCk7XHJcbiAgICAgICAgICAgICAgICByZXN1bHQucHVzaChuZXcgVGV4dChjb250ZW50LCBmb250U2l6ZSwgeyB4OiAwLCB5OiBpbnRlcnZhbCAqIGkgKyBmb250U2l6ZSAqIDAuMzUgfSkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICAgICAgfVxyXG4gICAgXHJcbiAgICAgICAgcHVibGljIGRyYXcoKSB7XHJcbiAgICAgICAgICAgIGxldCBtYWluU3ZnOiBIVE1MRWxlbWVudCA9IHRoaXMuZGl2LnF1ZXJ5U2VsZWN0b3IoJyMnICsgU1ZHX0RJVik7XHJcblxyXG4gICAgICAgICAgICB0aGlzLmNyZWF0ZVJlZmVyZW5jZUxpbmVzKCkucmVuZGVyKG1haW5TdmcpO1xyXG5cclxuICAgICAgICAgICAgZm9yKGxldCBzZXQgb2YgdGhpcy5kYXRhQ29sbGVjdGlvbilcclxuICAgICAgICAgICAgICAgIHRoaXMuY3JlYXRlR3JhcGgoc2V0KS5yZW5kZXIobWFpblN2Zyk7XHJcblxyXG4gICAgICAgICAgICBsZXQgeUhlYWRlcnMgPSBuZXcgU1ZHQmF0Y2goJ3lIZWFkZXJzJyk7XHJcbiAgICAgICAgICAgIHlIZWFkZXJzLmNvbXBvbmVudHMgPSB0aGlzLmNyZWF0ZVlIZWFkZXJzKCk7XHJcbiAgICAgICAgICAgIHlIZWFkZXJzLnJlbmRlcihtYWluU3ZnKTtcclxuXHJcbiAgICAgICAgICAgIGxldCB4SGVhZGVycyA9IG5ldyBTVkdCYXRjaCgneEhlYWRlcnMnKTtcclxuICAgICAgICAgICAgeEhlYWRlcnMuY29tcG9uZW50cyA9IHRoaXMuY3JlYXRlWEhlYWRlcnMoKTtcclxuICAgICAgICAgICAgeEhlYWRlcnMucmVuZGVyKG1haW5TdmcpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICB9XHJcblxyXG4gICAgZXhwb3J0IGNsYXNzIExpbmVDaGFydCBleHRlbmRzIFhZQ2hhcnQge1xyXG5cclxuICAgICAgICBjb25zdHJ1Y3RvcihkaXY6IHN0cmluZykge1xyXG4gICAgICAgICAgICBzdXBlcihkaXYpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHJvdGVjdGVkIGNvbm5lY3RQb2ludHMoeDogbnVtYmVyLCB5OiBudW1iZXIsIHBhdGg6IFBhdGgpIHtcclxuICAgICAgICAgICAgcGF0aC5saW5lVG8oeCwgeSkubW92ZVRvKHgsIHkpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHJvdGVjdGVkIGNyZWF0ZUdyYXBoKCk6IFBhdGgge1xyXG4gICAgICAgICAgICBsZXQgcGF0aCA9IG5ldyBQYXRoKCdncmFwaCcpO1xyXG4gICAgICAgICAgICBwYXRoLm1vdmVUbygwLCAwKTtcclxuICAgICAgICAgICAgcGF0aC5saW5lVG8oMTAwLCAxMDApO1xyXG4gICAgICAgICAgICByZXR1cm4gcGF0aDtcclxuICAgICAgICB9XHJcblxyXG4gICAgfVxyXG4gICAgXHJcbiAgICBleHBvcnQgY2xhc3MgU3RlcExpbmVDaGFydCBleHRlbmRzIFhZQ2hhcnQge1xyXG4gICAgXHJcbiAgICAgICAgY29uc3RydWN0b3IoZGl2OiBzdHJpbmcpIHtcclxuICAgICAgICAgICAgc3VwZXIoZGl2KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHByb3RlY3RlZCBjb25uZWN0UG9pbnRzKHg6IG51bWJlciwgeTogbnVtYmVyLCBwYXRoOiBQYXRoLCBzZXQ6IERhdGFTZXQpIHtcclxuICAgICAgICAgICAgbGV0IG1vdmluZ1VwID0geSA8IHBhdGguY3VycmVudFBvc1sxXTtcclxuICAgICAgICAgICAgbGV0IGhhbGZTdHJva2UgPSBzZXQucHJvcGVydGllcy5wYXRoUHJvcGVydGllcy5zdHJva2VXaWR0aCAvIDI7XHJcbiAgICBcclxuICAgICAgICAgICAgcGF0aFxyXG4gICAgICAgICAgICAgICAgLkxpbmVIKHgpXHJcbiAgICAgICAgICAgICAgICAubW92ZVRvKHggLSBoYWxmU3Ryb2tlLCBtb3ZpbmdVcCA/IHBhdGguY3VycmVudFBvc1sxXSArIGhhbGZTdHJva2UgOiBwYXRoLmN1cnJlbnRQb3NbMV0gLSBoYWxmU3Ryb2tlKVxyXG4gICAgICAgICAgICAgICAgLkxpbmVWKG1vdmluZ1VwID8geSArIGhhbGZTdHJva2UgOiB5IC0gaGFsZlN0cm9rZSlcclxuICAgICAgICAgICAgICAgIC5tb3ZlVG8ocGF0aC5jdXJyZW50UG9zWzBdIC0gaGFsZlN0cm9rZSwgcGF0aC5jdXJyZW50UG9zWzFdKTtcclxuICAgICAgICB9XHJcbiAgICBcclxuICAgICAgICBwcm90ZWN0ZWQgY3JlYXRlR3JhcGgoc2V0OiBEYXRhU2V0KTogUGF0aCB7XHJcbiAgICAgICAgICAgIGxldCBwYXRoID0gbmV3IFBhdGgoJ2dyYXBoJywgc2V0LnByb3BlcnRpZXMucGF0aFByb3BlcnRpZXMpO1xyXG4gICAgICAgICAgICBjb25zdCBpbnRlcnZhbFggPSB0aGlzLmRpbWVuc2lvbnMud2lkdGggLyAoc2V0LmRhdGEubGVuZ3RoICsgMSlcclxuICAgICAgICAgICAgY29uc3QgaW50ZXJ2YWxZID0gdGhpcy5kaW1lbnNpb25zLmhlaWdodCAvIHNldC5wcm9wZXJ0aWVzLmRlbnNpdHk7XHJcbiAgICBcclxuICAgICAgICAgICAgcGF0aC5tb3ZlVG8oaW50ZXJ2YWxYLCB0aGlzLmRpbWVuc2lvbnMuaGVpZ2h0IC0gc2V0LmRhdGFbMF1bc2V0LnlLZXldIC8gc2V0LmJvdW5kcygpLm1heCAqIHRoaXMuZGltZW5zaW9ucy5oZWlnaHQgLSBpbnRlcnZhbFkgKTtcclxuICAgICAgICAgICAgZm9yKGxldCBpID0gMTsgaSA8IHNldC5kYXRhLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNvbm5lY3RQb2ludHMoaW50ZXJ2YWxYICogKGkgKyAxKSwgKHRoaXMuZGltZW5zaW9ucy5oZWlnaHQgLSBpbnRlcnZhbFkpIC0gc2V0LmRhdGFbaV1bc2V0LnlLZXldIC8gc2V0LmJvdW5kcygpLm1heCAqICh0aGlzLmRpbWVuc2lvbnMuaGVpZ2h0IC0gaW50ZXJ2YWxZKSwgcGF0aCwgc2V0KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBwYXRoLkxpbmVIKHRoaXMuZGltZW5zaW9ucy53aWR0aCk7XHJcbiAgICAgICAgICAgIHRoaXMuY29tcG9uZW50cy5wdXQocGF0aC5pZCwgcGF0aCk7XHJcbiAgICAgICAgICAgIHJldHVybiBwYXRoO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIFxyXG4gICAgfSAvLyBOYW1lc3BhY2UgZW5kIl0sInNvdXJjZVJvb3QiOiIifQ==