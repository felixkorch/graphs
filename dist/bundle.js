!function(t){var e={};function n(i){if(e[i])return e[i].exports;var r=e[i]={i:i,l:!1,exports:{}};return t[i].call(r.exports,r,r.exports,n),r.l=!0,r.exports}n.m=t,n.c=e,n.d=function(t,e,i){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:i})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var i=Object.create(null);if(n.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var r in t)n.d(i,r,function(e){return t[e]}.bind(null,r));return i},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=0)}([function(t,e,n){"use strict";n.r(e),n.d(e,"xycharts",function(){return r});var i,r,o=(i=function(t,e){return(i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}i(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});!function(t){var e,n=function(){function t(){this.object={}}return t.prototype.put=function(t,e){this.object[t]=e},t.prototype.get=function(t){return this.object[t]},t}(),i=function(){return function(t){this.id=t||""}}(),r=function(){return function(){this.stroke="BLUE",this.strokeWidth=3}}(),s=function(){return function(){}}(),h=function(){function t(t){this.data=t||[],this.properties=new s,this.xKey="",this.yKey=""}return t.prototype.addData=function(t,e){this.data.splice(0,e),this.data.push(t)},t.prototype.bounds=function(){if(!this.data)return{min:0,max:0};var t=this.data.map(function(t){return t.value});return{min:Math.min.apply(Math,t),max:Math.max.apply(Math,t)}},t.prototype.toHourMinute=function(){var t=this;return this.data.map(function(e){return new Date(e[t.xKey]).toLocaleTimeString([],{hour:"2-digit",minute:"2-digit"})})},t}();t.DataSet=h,function(t){t[t.MOVETO=0]="MOVETO",t[t.LINETO=1]="LINETO",t[t.LINEH=2]="LINEH",t[t.LINEV=3]="LINEV"}(e||(e={}));var a=function(t){function n(e,n){var i=t.call(this,e)||this;return i.pathProperties=n||new r,i.currentPos=[0,0],i.dataPoints=[],i}return o(n,t),n.typeString=function(t,n){switch(t){case e.MOVETO:return"M "+n[0]+" "+n[1]+" ";case e.LINETO:return"L "+n[0]+" "+n[1]+" ";case e.LINEH:return"H "+n[0]+" ";case e.LINEV:return"V "+n[1]+" "}},n.prototype.moveTo=function(t,n){return this.currentPos=[t,n],this.dataPoints.push({coords:[t,n],type:e.MOVETO}),this},n.prototype.lineTo=function(t,n){return this.currentPos=[t,n],this.dataPoints.push({coords:[t,n],type:e.LINETO}),this},n.prototype.LineH=function(t){return this.currentPos[0]=t,this.dataPoints.push({coords:[t,0],type:e.LINEH}),this},n.prototype.LineV=function(t){return this.currentPos[1]=t,this.dataPoints.push({coords:[0,t],type:e.LINEV}),this},n.prototype.update=function(){for(var t="",e=0,i=this.dataPoints;e<i.length;e++){var r=i[e];t+=n.typeString(r.type,r.coords)}this.path=t},n.prototype.render=function(t){this.update();var e=t.querySelector("#"+this.id);e?e.setAttribute("d",this.path):t.innerHTML+='<path id="'+this.id+'" d="'+this.path+'"stroke='+this.pathProperties.stroke+" stroke-width="+this.pathProperties.strokeWidth+" />"},n}(i),u=function(t){function e(e,n,i,r){var o=t.call(this,r)||this;return o.content=e,o.fontSize=n,o.position=i,o}return o(e,t),e.prototype.render=function(t){this.id?t.querySelector("#"+this.id).innerHTML=this.content:t.innerHTML+='<text id="'+this.id+'" font-size="'+this.fontSize+'"x="'+this.position.x+'" y="'+this.position.y+'" class="small">'+this.content+"</text>"},e}(i),c=function(t){function e(e){var n=t.call(this,e)||this;return n._components=[],n}return o(e,t),Object.defineProperty(e.prototype,"components",{set:function(t){this._components=t},enumerable:!0,configurable:!0}),e.prototype.render=function(t){t.querySelector("#"+this.id)||(t.innerHTML+='<g id="'+this.id+'"></g>');var e=t.querySelector("#"+this.id);e.innerHTML="",this._components.forEach(function(t){return t.render(e)})},e}(i),d=function(){function t(t){this.div=document.getElementById(t),this.offsetX=.04*this.div.offsetWidth,this.offsetY=.05*this.div.offsetHeight,this.dimensions={width:this.div.offsetWidth-this.offsetX,height:this.div.offsetHeight-this.offsetY},this.components=new n,this.div.innerHTML=this.renderSVG(),this.dataCollection=[]}return t.prototype.createDataSet=function(){var t=new h;return this.dataCollection.push(t),t},t.prototype.renderSVG=function(t){return'<svg id="SVG_DIV" width="100%" height="100%" viewBox=" 0 0 '+this.div.offsetWidth+" "+this.div.offsetHeight+'"><g id="main" transform="translate('+this.offsetX/2+" "+this.offsetY/2+')" ></g></svg>'},t.prototype.createReferenceLines=function(){var t=this.dataCollection[0];if(t){for(var e=t.properties.density,n={stroke:"#dbdbdb",strokeWidth:.5},i=n.strokeWidth/2,r=this.dimensions.width/(t.data.length+1),o=new a("refLines",n),s=0;s<t.data.length-1;s++)o.moveTo(r*(s+2)-i,i),o.LineV(this.dimensions.height-i);for(s=0;s<e-1;s++)o.moveTo(i+r,this.dimensions.height/e*(s+1)+i),o.LineH(this.dimensions.width-i);return this.components.put(o.id,o),o}},t.prototype.createXHeaders=function(){var t=this.dataCollection[0];if(t){for(var e=[],n=this.dimensions.height/46,i=this.dimensions.width/(t.data.length+1),r=t.toHourMinute(),o=0;o<t.data.length;o++)e.push(new u(r[o],n,{x:i*(o+1),y:this.dimensions.height}));return e}},t.prototype.createYHeaders=function(){var t=this.dataCollection[0];if(t){for(var e=[],n=this.dimensions.height/35,i=t.properties.density,r=this.dimensions.height/i,o=0;o<i;o++){var s=Math.floor(t.bounds().max-o*t.bounds().max/(i-1)).toString();e.push(new u(s,n,{x:0,y:r*o+.35*n}))}return e}},t.prototype.draw=function(){var t=this.div.querySelector("#main");this.createReferenceLines().render(t);for(var e=0,n=this.dataCollection;e<n.length;e++){var i=n[e];this.createGraph(i).render(t)}var r=new c("yHeaders");r.components=this.createYHeaders(),r.render(t);var o=new c("xHeaders");o.components=this.createXHeaders(),o.render(t)},t}();t.XYChart=d;var p=function(t){function e(e){return t.call(this,e)||this}return o(e,t),e.prototype.connectPoints=function(t,e,n){n.lineTo(t,e).moveTo(t,e)},e.prototype.createGraph=function(){var t=new a("graph");return t.moveTo(0,0),t.lineTo(100,100),t},e}(d);t.LineChart=p;var f=function(t){function e(e){return t.call(this,e)||this}return o(e,t),e.prototype.connectPoints=function(t,e,n,i){var r=e<n.currentPos[1],o=i.properties.pathProperties.strokeWidth/2;n.LineH(t).moveTo(t-o,r?n.currentPos[1]+o:n.currentPos[1]-o).LineV(r?e+o:e-o).moveTo(n.currentPos[0]-o,n.currentPos[1])},e.prototype.createGraph=function(t){var e=new a("graph",t.properties.pathProperties),n=this.dimensions.width/(t.data.length+1),i=this.dimensions.height/t.properties.density;e.moveTo(n,this.dimensions.height-t.data[0][t.yKey]/t.bounds().max*this.dimensions.height-i);for(var r=1;r<t.data.length;r++)this.connectPoints(n*(r+1),this.dimensions.height-i-t.data[r][t.yKey]/t.bounds().max*(this.dimensions.height-i),e,t);return e.LineH(this.dimensions.width),this.components.put(e.id,e),e},e}(d);t.StepLineChart=f}(r||(r={})),e.default=r}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,